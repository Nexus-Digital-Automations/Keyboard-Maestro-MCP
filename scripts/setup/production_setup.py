#!/usr/bin/env python3
"""
Production setup automation for Keyboard Maestro MCP Server.

This script handles complete production environment setup including:
- System dependency verification
- Python environment setup
- Configuration file generation
- Permission validation
- Security setup

Usage:
    python scripts/setup/production_setup.py --domain example.com --email admin@example.com
"""

import argparse
import os
import sys
import subprocess
import shutil
import secrets
import string
from pathlib import Path
from typing import Dict, Any, Optional, List
from dataclasses import dataclass

# Add src to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

# Import with fallback for missing modules
try:
    from src.contracts.decorators import requires, ensures
except ImportError:
    # Fallback decorators for standalone execution
    def requires(condition):
        """Fallback decorator for requires."""
        def decorator(func):
            return func
        return decorator
    
    def ensures(condition):
        """Fallback decorator for ensures."""
        def decorator(func):
            return func
        return decorator


@dataclass
class SetupConfig:
    """Production setup configuration."""
    domain: Optional[str]
    email: Optional[str]
    ssl_enabled: bool
    auto_start: bool
    user_creation: bool
    firewall_config: bool
    backup_setup: bool
    monitoring_setup: bool


class ProductionSetup:
    """Handles production environment setup."""
    
    def __init__(self, config: SetupConfig):
        self.config = config
        self.project_root = Path(__file__).parent.parent.parent
        self.setup_log: List[str] = []
    
    def log(self, message: str) -> None:
        """Log setup message."""
        print(f"[SETUP] {message}")
        self.setup_log.append(message)
    
    def check_system_requirements(self) -> None:
        """Verify system requirements for production deployment."""
        self.log("Checking system requirements...")
        
        # Check operating system
        if not sys.platform.startswith('darwin'):
            raise RuntimeError("This server requires macOS for Keyboard Maestro integration")
        
        # Check Python version
        if sys.version_info < (3, 10):
            raise RuntimeError("Python 3.10+ is required")
        
        # Check available memory
        try:
            import psutil
            memory = psutil.virtual_memory()
            if memory.total < 2 * 1024**3:  # 2GB
                self.log("WARNING: Less than 2GB RAM available")
        except ImportError:
            self.log("Unable to check memory requirements (psutil not available)")
        
        # Check disk space
        disk_usage = shutil.disk_usage(self.project_root)
        if disk_usage.free < 1 * 1024**3:  # 1GB
            raise RuntimeError("Insufficient disk space (minimum 1GB required)")
        
        self.log("System requirements check complete")
    
    def setup_python_environment(self) -> None:
        """Setup Python virtual environment and dependencies."""
        self.log("Setting up Python environment...")
        
        venv_path = self.project_root / ".venv"
        
        # Create virtual environment if it doesn't exist
        if not venv_path.exists():
            subprocess.run([
                sys.executable, "-m", "venv", str(venv_path)
            ], check=True)
            self.log("Virtual environment created")
        
        # Get virtual environment Python path
        if sys.platform.startswith('win'):
            venv_python = venv_path / "Scripts" / "python.exe"
        else:
            venv_python = venv_path / "bin" / "python"
        
        # Install/upgrade pip and uv
        subprocess.run([
            str(venv_python), "-m", "pip", "install", "--upgrade", "pip", "uv"
        ], check=True)
        
        # Install production requirements
        subprocess.run([
            str(venv_python), "-m", "uv", "pip", "install", 
            "-r", str(self.project_root / "requirements.txt")
        ], check=True)
        
        self.log("Python environment setup complete")
    
    def generate_configuration(self) -> None:
        """Generate production configuration files."""
        self.log("Generating production configuration...")
        
        # Generate JWT secret key
        jwt_secret = secrets.token_urlsafe(32)
        
        # Generate environment file
        env_content = f"""# Production Environment Configuration
# Generated by production setup

# Server Configuration
KM_MCP_TRANSPORT=streamable-http
KM_MCP_HOST=0.0.0.0
KM_MCP_PORT=8080
KM_MCP_DEV_MODE=false

# Security Configuration
KM_MCP_AUTH_REQUIRED=true
KM_MCP_JWT_SECRET_KEY={jwt_secret}
KM_MCP_JWT_ALGORITHM=HS256
KM_MCP_JWT_EXPIRATION=3600

# Performance Settings
KM_MCP_MAX_CONCURRENT_OPERATIONS=100
KM_MCP_OPERATION_TIMEOUT=30

# Logging Configuration
KM_MCP_LOG_LEVEL=INFO
KM_MCP_LOG_FILE=logs/km-mcp-server.log
KM_MCP_LOG_FORMAT=json

# Error Tracking
KM_MCP_ERROR_REPORTING=true
"""
        
        if self.config.domain:
            env_content += f"\n# Domain Configuration\nKM_MCP_DOMAIN={self.config.domain}\n"
        
        # Write environment file
        env_path = self.project_root / ".env"
        with open(env_path, "w") as f:
            f.write(env_content)
        
        # Set secure permissions
        os.chmod(env_path, 0o600)
        
        self.log("Configuration files generated")
    
    def setup_logging_directory(self) -> None:
        """Create and configure logging directory."""
        self.log("Setting up logging directory...")
        
        logs_dir = self.project_root / "logs"
        logs_dir.mkdir(exist_ok=True)
        
        # Set appropriate permissions
        os.chmod(logs_dir, 0o755)
        
        self.log("Logging directory configured")
    
    def verify_keyboard_maestro(self) -> None:
        """Verify Keyboard Maestro installation and permissions."""
        self.log("Verifying Keyboard Maestro installation...")
        
        km_path = Path("/Applications/Keyboard Maestro.app")
        if not km_path.exists():
            self.log("WARNING: Keyboard Maestro not found at standard location")
            self.log("Server will start but functionality will be limited")
            return
        
        # Check if Keyboard Maestro is running
        try:
            subprocess.run([
                "osascript", "-e", 
                'tell application "System Events" to exists process "Keyboard Maestro Engine"'
            ], check=True, capture_output=True)
            self.log("Keyboard Maestro Engine is running")
        except subprocess.CalledProcessError:
            self.log("WARNING: Keyboard Maestro Engine is not running")
            self.log("Please start Keyboard Maestro before running the server")
        
        self.log("Keyboard Maestro verification complete")
    
    def check_accessibility_permissions(self) -> None:
        """Check and guide user through accessibility permissions setup."""
        self.log("Checking accessibility permissions...")
        
        # Create a simple AppleScript to test accessibility
        test_script = '''
        tell application "System Events"
            try
                set appList to name of every application process
                return "success"
            on error
                return "error"
            end try
        end tell
        '''
        
        try:
            result = subprocess.run([
                "osascript", "-e", test_script
            ], capture_output=True, text=True, check=True)
            
            if "success" in result.stdout:
                self.log("Accessibility permissions are properly configured")
            else:
                self._guide_accessibility_setup()
                
        except subprocess.CalledProcessError:
            self._guide_accessibility_setup()
    
    def _guide_accessibility_setup(self) -> None:
        """Guide user through accessibility permissions setup."""
        self.log("Accessibility permissions need to be configured:")
        self.log("1. Open System Preferences > Security & Privacy > Privacy")
        self.log("2. Select 'Accessibility' in the left panel")
        self.log("3. Click the lock to make changes")
        self.log("4. Add Terminal (or your Python interpreter) to the list")
        self.log("5. Ensure the checkbox is enabled")
        self.log("6. Restart the setup process")
        
        response = input("Have you configured accessibility permissions? (y/N): ")
        if response.lower() != 'y':
            raise RuntimeError("Accessibility permissions are required for operation")
    
    def create_systemd_service(self) -> None:
        """Create systemd service file for auto-start (Linux only)."""
        if not sys.platform.startswith('linux'):
            self.log("Systemd service creation skipped (not Linux)")
            return
        
        if not self.config.auto_start:
            self.log("Auto-start disabled, skipping systemd service")
            return
        
        self.log("Creating systemd service...")
        
        service_content = f"""[Unit]
Description=Keyboard Maestro MCP Server
After=network.target

[Service]
Type=simple
User=kmuser
Group=kmuser
WorkingDirectory={self.project_root}
Environment=PATH={self.project_root}/.venv/bin
ExecStart={self.project_root}/.venv/bin/python -m src.main
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
"""
        
        service_path = Path("/etc/systemd/system/keyboard-maestro-mcp.service")
        
        try:
            with open(service_path, "w") as f:
                f.write(service_content)
            
            # Reload systemd and enable service
            subprocess.run(["systemctl", "daemon-reload"], check=True)
            subprocess.run(["systemctl", "enable", "keyboard-maestro-mcp"], check=True)
            
            self.log("Systemd service created and enabled")
            
        except (PermissionError, subprocess.CalledProcessError) as e:
            self.log(f"Failed to create systemd service: {e}")
            self.log("Manual service setup may be required")
    
    def setup_firewall(self) -> None:
        """Configure firewall rules for the server."""
        if not self.config.firewall_config:
            self.log("Firewall configuration disabled")
            return
        
        self.log("Configuring firewall...")
        
        try:
            # Allow inbound connections on server port
            subprocess.run([
                "ufw", "allow", "8080/tcp", "comment", "Keyboard Maestro MCP Server"
            ], check=True)
            
            self.log("Firewall rules configured")
            
        except (FileNotFoundError, subprocess.CalledProcessError):
            self.log("Firewall configuration failed or not supported")
            self.log("Manual firewall setup may be required")
    
    def setup_monitoring(self) -> None:
        """Setup basic monitoring and health checks."""
        if not self.config.monitoring_setup:
            self.log("Monitoring setup disabled")
            return
        
        self.log("Setting up monitoring...")
        
        # Create health check script
        health_check_script = f"""#!/bin/bash
# Health check script for Keyboard Maestro MCP Server

HEALTH_URL="http://localhost:8080/health"
LOG_FILE="{self.project_root}/logs/health-check.log"

# Perform health check
response=$(curl -s -o /dev/null -w "%{{http_code}}" "$HEALTH_URL" 2>/dev/null)

if [ "$response" = "200" ]; then
    echo "$(date): Health check PASSED" >> "$LOG_FILE"
    exit 0
else
    echo "$(date): Health check FAILED (HTTP $response)" >> "$LOG_FILE"
    exit 1
fi
"""
        
        health_script_path = self.project_root / "scripts" / "health_check.sh"
        with open(health_script_path, "w") as f:
            f.write(health_check_script)
        
        os.chmod(health_script_path, 0o755)
        
        self.log("Monitoring setup complete")
    
    def run_setup(self) -> None:
        """Execute complete production setup."""
        try:
            self.log("Starting production setup...")
            
            # System validation
            self.check_system_requirements()
            
            # Environment setup
            self.setup_python_environment()
            self.generate_configuration()
            self.setup_logging_directory()
            
            # macOS-specific setup
            self.verify_keyboard_maestro()
            self.check_accessibility_permissions()
            
            # Optional components
            if self.config.auto_start:
                self.create_systemd_service()
            
            if self.config.firewall_config:
                self.setup_firewall()
            
            if self.config.monitoring_setup:
                self.setup_monitoring()
            
            self.log("Production setup completed successfully!")
            self.log("")
            self.log("Next steps:")
            self.log("1. Review the generated .env file")
            self.log("2. Test the server: python scripts/build/deploy.py --dry-run")
            self.log("3. Deploy: python scripts/build/deploy.py")
            
        except Exception as e:
            self.log(f"Setup failed: {e}")
            sys.exit(1)


def parse_arguments() -> SetupConfig:
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(
        description="Setup Keyboard Maestro MCP Server for production"
    )
    
    parser.add_argument(
        "--domain",
        help="Server domain name"
    )
    
    parser.add_argument(
        "--email",
        help="Administrator email address"
    )
    
    parser.add_argument(
        "--ssl",
        action="store_true",
        help="Enable SSL/TLS configuration"
    )
    
    parser.add_argument(
        "--auto-start",
        action="store_true",
        help="Setup auto-start service"
    )
    
    parser.add_argument(
        "--create-user",
        action="store_true",
        help="Create dedicated system user"
    )
    
    parser.add_argument(
        "--configure-firewall",
        action="store_true",
        help="Configure firewall rules"
    )
    
    parser.add_argument(
        "--setup-backup",
        action="store_true",
        help="Setup backup procedures"
    )
    
    parser.add_argument(
        "--setup-monitoring",
        action="store_true",
        help="Setup monitoring and health checks"
    )
    
    args = parser.parse_args()
    
    return SetupConfig(
        domain=args.domain,
        email=args.email,
        ssl_enabled=args.ssl,
        auto_start=args.auto_start,
        user_creation=args.create_user,
        firewall_config=args.configure_firewall,
        backup_setup=args.setup_backup,
        monitoring_setup=args.setup_monitoring
    )


def main():
    """Main setup entry point."""
    config = parse_arguments()
    setup = ProductionSetup(config)
    setup.run_setup()


if __name__ == "__main__":
    main()
